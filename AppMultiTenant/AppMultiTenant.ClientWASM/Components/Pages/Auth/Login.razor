@page "/login"
@page "/login/{ReturnUrl}"
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject IAuthApiClient AuthApiClient
@inject IJSRuntime JSRuntime

<PageTitle>Login - AppMultiTenant</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-12 col-sm-6 col-md-4">
            <div class="card shadow p-4 mb-5">
                <h2 class="mb-4 text-center">Iniciar Sesión</h2>
                
                <EditForm Model="loginViewModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />
                    
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="loginViewModel.Email" />
                        <ValidationMessage For="() => loginViewModel.Email" class="text-danger" />
                    </div>
                    
                    <div class="mb-3">
                        <label for="password" class="form-label">Contraseña</label>
                        <InputText id="password" class="form-control" type="password" @bind-Value="loginViewModel.Password" />
                        <ValidationMessage For="() => loginViewModel.Password" class="text-danger" />
                    </div>
                    
                    <button type="submit" class="btn btn-primary w-100 mt-3" disabled="@isBusy">
                        @if (isBusy)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <span>Iniciando sesión...</span>
                        }
                        else
                        {
                            <span>Iniciar Sesión</span>
                        }
                    </button>
                </EditForm>
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
                
                <div class="mt-3 text-center">
                    <p>¿No tienes una cuenta? <a href="/register" class="link-primary">Registrarse</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ReturnUrl { get; set; }

    private LoginViewModel loginViewModel = new();
    private bool isBusy = false;
    private string errorMessage = "";
    private string returnUrlValue;

    protected override async Task OnInitializedAsync()
    {
        // Redireccionar si ya está autenticado
        var isAuthenticated = await AuthApiClient.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        // Intentar obtener el returnUrl de los parámetros de consulta si no está en la ruta
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var returnUrlQueryValue))
        {
            returnUrlValue = returnUrlQueryValue;
        }
        else if (!string.IsNullOrEmpty(ReturnUrl))
        {
            returnUrlValue = ReturnUrl;
        }
        else
        {
            // Intentar obtener de localStorage como respaldo
            try
            {
                returnUrlValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "returnUrl");
            }
            catch
            {
                returnUrlValue = "";
            }
        }
    }

    private async Task HandleLogin()
    {
        if (!loginViewModel.IsValid()) return;

        isBusy = true;
        errorMessage = "";

        try
        {
            // Crear el request de login
            var loginRequest = new LoginRequest { 
                Email = loginViewModel.Email, 
                Password = loginViewModel.Password 
            };

            // Utilizar el AuthApiClient para realizar el login
            var authResponse = await AuthApiClient.LoginAsync(loginRequest);

            // Guardar token y notificar cambio de estado de autenticación
            await AuthStateProvider.MarkUserAsAuthenticated(authResponse.Token, authResponse.User);
            
            // Limpiar la URL de retorno del localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "returnUrl");
            
            // Redireccionar a la página original o a la principal
            if (!string.IsNullOrEmpty(returnUrlValue))
            {
                string decodedUrl = Uri.UnescapeDataString(returnUrlValue);
                NavigationManager.NavigateTo(decodedUrl);
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Error al iniciar sesión. Verifique sus credenciales.";
            Console.Error.WriteLine($"Error de login: {ex.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isBusy = false;
            StateHasChanged();
        }
    }
} 