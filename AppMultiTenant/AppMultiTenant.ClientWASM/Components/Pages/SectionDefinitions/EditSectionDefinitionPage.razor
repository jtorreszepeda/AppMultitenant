@page "/section-definitions/edit/{SectionDefinitionId}"
@inject EditSectionDefinitionViewModel ViewModel
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<PageTitle>Editar Definición de Sección</PageTitle>

<div class="container-fluid px-4">
    <h1 class="mt-4">Editar Definición de Sección</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/">Inicio</a></li>
        <li class="breadcrumb-item"><a href="/section-definitions">Definiciones de Secciones</a></li>
        <li class="breadcrumb-item active">Editar Definición</li>
    </ol>

    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-edit me-1"></i>
            Formulario de Edición de Definición de Sección
        </div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
            {
                <div class="alert alert-danger">@ViewModel.ErrorMessage</div>
            }

            @if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
            {
                <div class="alert alert-success">@ViewModel.SuccessMessage</div>
            }

            @if (ViewModel.IsLoading && string.IsNullOrEmpty(ViewModel.Name))
            {
                <div class="d-flex justify-content-center my-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>
            }
            else
            {
                <EditForm Model="ViewModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label for="name">Nombre de la Sección</label>
                        <InputText id="name" @bind-Value="ViewModel.Name" class="form-control" />
                        <ValidationMessage For="@(() => ViewModel.Name)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="description">Descripción</label>
                        <InputTextArea id="description" @bind-Value="ViewModel.Description" class="form-control" rows="3" />
                        <ValidationMessage For="@(() => ViewModel.Description)" />
                    </div>

                    <hr class="my-4">

                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4>Campos de la Sección</h4>
                        <div class="alert alert-warning py-1 px-3 mb-0" role="alert">
                            <i class="fas fa-exclamation-triangle me-1"></i>
                            <small>Los cambios en campos existentes pueden afectar a los datos</small>
                        </div>
                    </div>

                    <div class="table-responsive mb-3">
                        <table class="table table-bordered table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Nombre</th>
                                    <th>Tipo de Dato</th>
                                    <th>Requerido</th>
                                    <th>Orden</th>
                                    <th style="width: 80px">Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (ViewModel.Fields.Count == 0)
                                {
                                    <tr>
                                        <td colspan="5" class="text-center">No se han agregado campos a esta sección</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var field in ViewModel.Fields)
                                    {
                                        <tr>
                                            <td>@field.Name</td>
                                            <td>@field.DataType</td>
                                            <td>@(field.IsRequired ? "Sí" : "No")</td>
                                            <td>@field.DisplayOrder</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="() => ViewModel.StartEditField(field)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteField(field)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <i class="fas fa-plus-circle me-1"></i>
                            @(ViewModel.IsEditingField ? "Editar Campo" : "Agregar Nuevo Campo")
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4 mb-3">
                                    <label for="tempFieldName">Nombre del Campo</label>
                                    <InputText id="tempFieldName" @bind-Value="ViewModel.TempFieldName" class="form-control" />
                                    <ValidationMessage For="@(() => ViewModel.TempFieldName)" />
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label for="tempFieldDataType">Tipo de Dato</label>
                                    <InputSelect id="tempFieldDataType" @bind-Value="ViewModel.TempFieldDataType" class="form-select">
                                        @foreach (var dataType in ViewModel.AvailableDataTypes)
                                        {
                                            <option value="@dataType">@dataType</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => ViewModel.TempFieldDataType)" />
                                </div>
                                <div class="col-md-4 mb-3">
                                    <label for="tempFieldDisplayOrder">Orden de Visualización</label>
                                    <InputNumber id="tempFieldDisplayOrder" @bind-Value="ViewModel.TempFieldDisplayOrder" class="form-control" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 mb-3">
                                    <div class="form-check mt-4">
                                        <InputCheckbox id="tempFieldIsRequired" @bind-Value="ViewModel.TempFieldIsRequired" class="form-check-input" />
                                        <label class="form-check-label" for="tempFieldIsRequired">
                                            Campo Requerido
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-8 mb-3">
                                    <label for="tempFieldConfigJson">Configuración JSON (opcional)</label>
                                    <InputTextArea id="tempFieldConfigJson" @bind-Value="ViewModel.TempFieldConfigJson" class="form-control" rows="2" />
                                    <small class="text-muted">Ej: {"options": ["Opción 1", "Opción 2"]} para tipos SingleSelect/MultiSelect</small>
                                </div>
                            </div>
                            <div class="d-flex justify-content-end">
                                @if (ViewModel.IsEditingField)
                                {
                                    <button type="button" class="btn btn-outline-secondary me-2" @onclick="() => ViewModel.CancelFieldEdit()">
                                        <i class="fas fa-times me-1"></i> Cancelar
                                    </button>
                                    <button type="button" class="btn btn-outline-success" @onclick="() => ViewModel.SaveFieldChanges()">
                                        <i class="fas fa-check me-1"></i> Actualizar Campo
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-outline-primary" @onclick="() => ViewModel.StartAddNewField()">
                                        <i class="fas fa-plus me-1"></i> Agregar Campo
                                    </button>
                                    <button type="button" class="btn btn-outline-success ms-2" @onclick="() => ViewModel.SaveFieldChanges()">
                                        <i class="fas fa-check me-1"></i> Guardar Campo
                                    </button>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="form-group mt-4 d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary" @onclick="NavigateToSectionDefinitionList">
                            <i class="fas fa-arrow-left me-1"></i> Volver
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@ViewModel.IsSaving">
                            @if (ViewModel.IsSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Guardando...</span>
                            }
                            else
                            {
                                <i class="fas fa-save me-1"></i>
                                <span>Guardar Cambios</span>
                            }
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

<!-- Modal de Confirmación de Eliminación -->
<div class="modal fade" id="deleteFieldModal" tabindex="-1" aria-labelledby="deleteFieldModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteFieldModalLabel">Confirmar Eliminación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro que desea eliminar este campo?</p>
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>¡Advertencia!</strong> Si ya existen datos, se perderá información asociada a este campo.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteField" data-bs-dismiss="modal">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string SectionDefinitionId { get; set; } = string.Empty;
    
    private FieldDefinitionDto FieldToDelete { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.LoadSectionDefinitionAsync(SectionDefinitionId);
    }

    private async Task DeleteField(FieldDefinitionDto field)
    {
        FieldToDelete = field;
        // Mostrar modal de confirmación
        await jsRuntime.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('deleteFieldModal')).show()");
    }

    private void ConfirmDeleteField()
    {
        if (FieldToDelete != null)
        {
            ViewModel.DeleteField(FieldToDelete);
            FieldToDelete = null;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (ViewModel.Fields.Count == 0)
        {
            ViewModel.ErrorMessage = "Debe agregar al menos un campo a la definición de sección";
            return;
        }

        await ViewModel.SaveChangesAsync();
    }

    private void NavigateToSectionDefinitionList()
    {
        NavigationManager.NavigateTo("/section-definitions");
    }
} 