@page "/users/create"
@using AppMultiTenant.Client.ViewModels
@using System.ComponentModel.DataAnnotations
@using AppMultiTenant.Client.Components.Auth
@inject CreateUserViewModel ViewModel
@inject NavigationManager NavigationManager

<PageTitle>Crear Nuevo Usuario</PageTitle>

<RequireRole Roles="SystemAdmin,TenantAdmin">
    <div class="container-fluid px-4">
        <h1 class="mt-4">Crear Usuario</h1>
        <ol class="breadcrumb mb-4">
            <li class="breadcrumb-item"><a href="/">Inicio</a></li>
            <li class="breadcrumb-item"><a href="/users">Usuarios</a></li>
            <li class="breadcrumb-item active">Crear Usuario</li>
        </ol>

        <div class="card mb-4">
            <div class="card-header">
                <i class="fas fa-user-plus me-1"></i>
                Formulario de Nuevo Usuario
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
                {
                    <div class="alert alert-danger">@ViewModel.ErrorMessage</div>
                }

                @if (!string.IsNullOrEmpty(ViewModel.SuccessMessage))
                {
                    <div class="alert alert-success">@ViewModel.SuccessMessage</div>
                }

                <EditForm Model="ViewModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label for="userName">Nombre de Usuario</label>
                        <InputText id="userName" @bind-Value="ViewModel.UserName" class="form-control" />
                        <ValidationMessage For="@(() => ViewModel.UserName)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="ViewModel.Email" type="email" class="form-control" />
                        <ValidationMessage For="@(() => ViewModel.Email)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="fullName">Nombre Completo</label>
                        <InputText id="fullName" @bind-Value="ViewModel.FullName" class="form-control" />
                        <ValidationMessage For="@(() => ViewModel.FullName)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="password">Contraseña</label>
                        <InputText id="password" @bind-Value="ViewModel.Password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => ViewModel.Password)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="confirmPassword">Confirmar Contraseña</label>
                        <InputText id="confirmPassword" @bind-Value="ViewModel.ConfirmPassword" type="password" class="form-control" />
                        <ValidationMessage For="@(() => ViewModel.ConfirmPassword)" />
                    </div>

                    <div class="form-group mb-3">
                        <label>Roles</label>
                        @if (ViewModel.AvailableRoles.Count == 0)
                        {
                            <p class="text-muted">Cargando roles...</p>
                        }
                        else
                        {
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var role in ViewModel.AvailableRoles)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="role-@role.Id"
                                               checked="@SelectedRoles.Contains(role.Id)"
                                               @onchange="@(e => OnRoleSelectionChanged(role.Id, e.Value))" />
                                        <label class="form-check-label" for="role-@role.Id">
                                            @role.Name
                                        </label>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    <div class="form-group mt-4 d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary" @onclick="NavigateToUserList">
                            <i class="fas fa-arrow-left me-1"></i> Volver
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@ViewModel.IsLoading">
                            @if (ViewModel.IsLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Guardando...</span>
                            }
                            else
                            {
                                <i class="fas fa-save me-1"></i>
                                <span>Guardar</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</RequireRole>

@code {
    private HashSet<string> SelectedRoles = new HashSet<string>();

    protected override async Task OnInitializedAsync()
    {
        // Cargamos los roles disponibles al inicializar el componente
        await ViewModel.LoadRolesAsync();
        // Inicializamos SelectedRoles con los valores del ViewModel (si hay alguno)
        SelectedRoles = new HashSet<string>(ViewModel.SelectedRoles);
    }

    private void OnRoleSelectionChanged(string roleId, object isChecked)
    {
        if (isChecked is bool isSelected)
        {
            if (isSelected)
            {
                SelectedRoles.Add(roleId);
            }
            else
            {
                SelectedRoles.Remove(roleId);
            }

            // Actualizar el SelectedRoles del ViewModel
            ViewModel.SelectedRoles = SelectedRoles.ToList();
        }
    }

    private async Task HandleValidSubmit()
    {
        var createdUser = await ViewModel.CreateUserAsync();
        if (createdUser != null)
        {
            // Esperar un momento para mostrar el mensaje de éxito antes de redireccionar
            await Task.Delay(1500);
            NavigateToUserList();
        }
    }

    private void NavigateToUserList()
    {
        NavigationManager.NavigateTo("/users");
    }
} 