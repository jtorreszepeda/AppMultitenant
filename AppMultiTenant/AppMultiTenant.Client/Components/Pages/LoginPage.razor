@page "/login"
@page "/login/{TenantId}"
@using AppMultiTenant.Client.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.WebUtilities
@layout AppMultiTenant.Client.Components.Layout.MainLayout
@inject LoginViewModel ViewModel
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@attribute [AllowAnonymous]

<PageTitle>Iniciar Sesión - AppMultiTenant</PageTitle>

<MudPaper Class="pa-4" Width="100%" MaxWidth="500px" Elevation="3">
    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Iniciar Sesión</MudText>
    
    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">@ViewModel.ErrorMessage</MudAlert>
    }
    
    @if (!string.IsNullOrEmpty(TenantId))
    {
        <MudAlert Severity="Severity.Info" Class="mb-4">Iniciando sesión en el inquilino: @TenantId</MudAlert>
    }
    
    <EditForm Model="ViewModel" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Email"
                              @bind-Value="ViewModel.Email"
                              For="@(() => ViewModel.Email)"
                              InputType="InputType.Email"
                              Variant="Variant.Outlined"
                              Class="mb-3"
                              Required="true"
                              RequiredError="El email es obligatorio"
                              Disabled="@ViewModel.IsLoading" />
                
                <MudTextField Label="Contraseña"
                              @bind-Value="ViewModel.Password"
                              For="@(() => ViewModel.Password)"
                              InputType="InputType.Password"
                              Variant="Variant.Outlined"
                              Class="mb-3"
                              Required="true"
                              RequiredError="La contraseña es obligatoria"
                              Disabled="@ViewModel.IsLoading" />
                
                <MudCheckBox @bind-Checked="ViewModel.RememberMe"
                             For="@(() => ViewModel.RememberMe)"
                             Label="Recordarme"
                             Color="Color.Primary"
                             Class="mb-2"
                             Disabled="@ViewModel.IsLoading" />
            </MudCardContent>
            
            <MudCardActions Class="pb-4 px-4 d-flex flex-column">
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           FullWidth="true"
                           Size="Size.Large"
                           Class="mb-2"
                           Disabled="@ViewModel.IsLoading">
                    @if (ViewModel.IsLoading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Iniciando sesión...</MudText>
                    }
                    else
                    {
                        <MudText>Iniciar Sesión</MudText>
                    }
                </MudButton>
                
                @if (AllowRegistration)
                {
                    <MudButton OnClick="NavigateToRegister"
                               Variant="Variant.Text"
                               Color="Color.Secondary"
                               FullWidth="true"
                               Class="ml-auto"
                               Disabled="@ViewModel.IsLoading">
                        ¿No tienes cuenta? Regístrate
                    </MudButton>
                }
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudPaper>

@code {
    // Parámetro opcional para el ID del inquilino
    [Parameter]
    public string TenantId { get; set; }
    
    // Parámetro para la URL de retorno después de iniciar sesión
    private string ReturnUrl { get; set; }
    
    // Establecemos esto como una variable para poder deshabilitar el registro en caso necesario
    private bool AllowRegistration = true;

    private async Task OnValidSubmit()
    {
        bool success = await ViewModel.LoginAsync();
        
        if (success && !string.IsNullOrEmpty(ReturnUrl))
        {
            NavigationManager.NavigateTo(ReturnUrl);
        }
    }

    private void NavigateToRegister()
    {
        var uri = NavigationManager.GetUriWithQueryParameter("returnUrl", ReturnUrl);
        
        if (!string.IsNullOrEmpty(TenantId))
        {
            uri = $"/register/{TenantId}?returnUrl={Uri.EscapeDataString(ReturnUrl)}";
        }
        else
        {
            uri = $"/register?returnUrl={Uri.EscapeDataString(ReturnUrl)}";
        }
        
        NavigationManager.NavigateTo(uri);
    }

    protected override async Task OnInitializedAsync()
    {
        // Intentar obtener el parámetro returnUrl de la URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var returnUrl))
        {
            ReturnUrl = returnUrl;
        }
        else
        {
            ReturnUrl = "/";
        }
        
        // Si se ha proporcionado un ID de inquilino, configurarlo en el ViewModel
        if (!string.IsNullOrEmpty(TenantId))
        {
            // Aquí se podría establecer el inquilino en alguna propiedad del ViewModel si lo soporta
        }

        // Si el usuario ya está autenticado, redirige a la página principal o a returnUrl
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        
        if (authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo(ReturnUrl);
        }
    }
} 