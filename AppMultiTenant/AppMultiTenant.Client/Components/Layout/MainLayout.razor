@inherits LayoutComponentBase
@using AppMultiTenant.Client.State
@using AppMultiTenant.Client.Services
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject IAuthApiClient AuthApiClient

<div class="app-container">
    <AuthorizeView>
        <Authorized>
            <div class="app-layout">
                <header class="app-bar">
                    <button class="menu-button" @onclick="DrawerToggle">
                        <span class="menu-icon"></span>
                    </button>
                    <h1 class="app-title">AppMultiTenant</h1>
                    <div class="spacer"></div>
                    <div class="user-menu">
                        <button class="user-menu-button" @onclick="ToggleUserMenu">
                            <span class="user-icon"></span>
                        </button>
                        @if (_userMenuOpen)
                        {
                            <div class="user-menu-content">
                                <div class="user-info">@context.User.Identity?.Name</div>
                                <div class="divider"></div>
                                <button class="menu-item" @onclick="@(() => NavigateToPerfil())">
                                    <span class="menu-item-icon perfil-icon"></span>
                                    <span>Mi perfil</span>
                                </button>
                                <button class="menu-item" @onclick="@(() => NavigateToConfig())">
                                    <span class="menu-item-icon config-icon"></span>
                                    <span>Configuración</span>
                                </button>
                                <button class="menu-item" @onclick="Logout">
                                    <span class="menu-item-icon logout-icon"></span>
                                    <span>Cerrar sesión</span>
                                </button>
                            </div>
                        }
                    </div>
                </header>
                
                <nav class="app-drawer @(_drawerOpen ? "open" : "closed")">
                    <NavMenu />
                </nav>
                
                <main class="main-content">
                    @Body
                </main>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="app-layout auth-layout">
                <header class="app-bar">
                    <h1 class="app-title">AppMultiTenant</h1>
                    <div class="spacer"></div>
                </header>
                <main class="main-content">
                    <div class="container-small">
                        @Body
                    </div>
                </main>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _userMenuOpen = false;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleUserMenu()
    {
        _userMenuOpen = !_userMenuOpen;
    }

    private void NavigateToPerfil()
    {
        _userMenuOpen = false;
        NavigationManager.NavigateTo("/perfil");
    }

    private void NavigateToConfig()
    {
        _userMenuOpen = false;
        NavigationManager.NavigateTo("/configuracion");
    }

    private async Task Logout()
    {
        _userMenuOpen = false;
        
        // Usar AuthApiClient para hacer logout
        await AuthApiClient.LogoutAsync();
        
        // Actualizar el estado de autenticación en el AuthStateProvider
        await AuthStateProvider.MarkUserAsLoggedOut();
        
        NavigationManager.NavigateTo("/login");
    }
}
