@page "/login"
@using System.Net.Http.Json
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@using AppMultiTenant.Client.State
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<PageTitle>Login - AppMultiTenant</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Elevation="3" Class="pa-6 ma-2">
            <MudText Typo="Typo.h4" Class="mb-4 text-center">Iniciar Sesión</MudText>
            
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudTextField T="string" Label="Email" @bind-Value="email" 
                            Required="true" RequiredError="El email es requerido"
                            Validation="@(new EmailAddressAttribute() {ErrorMessage = "Email inválido"})" 
                            Immediate="true" />
                            
                <MudTextField T="string" Label="Contraseña" @bind-Value="password"
                            Required="true" RequiredError="La contraseña es requerida"
                            InputType="InputType.Password" Class="mt-3" />
                            
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                        Disabled="@(!success || isBusy)" OnClick="HandleLogin" 
                        FullWidth="true" Class="mt-4">
                    @if (isBusy)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Iniciando sesión...</MudText>
                    }
                    else
                    {
                        <MudText>Iniciar Sesión</MudText>
                    }
                </MudButton>
            </MudForm>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private string email = "";
    private string password = "";
    private bool success;
    private bool isBusy = false;
    private string errorMessage = "";
    private MudForm form;

    protected override void OnInitialized()
    {
        // Redireccionar si ya está autenticado
        var authState = AuthStateProvider.GetAuthenticationStateAsync().Result;
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        form.Validate();
        if (!success) return;

        isBusy = true;
        errorMessage = "";

        try
        {
            // Enviar solicitud de login
            var loginRequest = new { Email = email, Password = password };
            var response = await HttpClient.PostAsJsonAsync("api/auth/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadFromJsonAsync<JsonElement>();
                var token = responseContent.GetProperty("token").GetString();
                var userData = responseContent.GetProperty("user");

                // Guardar token y notificar cambio de estado de autenticación
                await AuthStateProvider.MarkUserAsAuthenticated(token, userData);
                
                // Redireccionar a la página principal
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var errorContent = await response.Content.ReadFromJsonAsync<JsonElement>();
                errorMessage = errorContent.TryGetProperty("message", out var messageElement) 
                    ? messageElement.GetString() 
                    : "Error al iniciar sesión. Verifique sus credenciales.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isBusy = false;
            StateHasChanged();
        }
    }
} 