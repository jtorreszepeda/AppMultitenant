@page "/login"
@using System.Net.Http.Json
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@using AppMultiTenant.Client.State
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject HttpClient HttpClient

<PageTitle>Login - AppMultiTenant</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-12 col-sm-6 col-md-4">
            <div class="card shadow p-4 mb-5">
                <h2 class="mb-4 text-center">Iniciar Sesión</h2>
                
                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />
                    
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                        <ValidationMessage For="() => loginModel.Email" class="text-danger" />
                    </div>
                    
                    <div class="mb-3">
                        <label for="password" class="form-label">Contraseña</label>
                        <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
                        <ValidationMessage For="() => loginModel.Password" class="text-danger" />
                    </div>
                    
                    <button type="submit" class="btn btn-primary w-100 mt-3" disabled="@isBusy">
                        @if (isBusy)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <span>Iniciando sesión...</span>
                        }
                        else
                        {
                            <span>Iniciar Sesión</span>
                        }
                    </button>
                </EditForm>
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isBusy = false;
    private string errorMessage = "";

    protected override void OnInitialized()
    {
        // Redireccionar si ya está autenticado
        var authState = AuthStateProvider.GetAuthenticationStateAsync().Result;
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        if (!loginModel.IsValid()) return;

        isBusy = true;
        errorMessage = "";

        try
        {
            // Enviar solicitud de login
            var loginRequest = new { Email = loginModel.Email, Password = loginModel.Password };
            var response = await HttpClient.PostAsJsonAsync("api/auth/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadFromJsonAsync<JsonElement>();
                var token = responseContent.GetProperty("token").GetString();
                var userData = responseContent.GetProperty("user");

                // Guardar token y notificar cambio de estado de autenticación
                await AuthStateProvider.MarkUserAsAuthenticated(token, userData);
                
                // Redireccionar a la página principal
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var errorContent = await response.Content.ReadFromJsonAsync<JsonElement>();
                errorMessage = errorContent.TryGetProperty("message", out var messageElement) 
                    ? messageElement.GetString() 
                    : "Error al iniciar sesión. Verifique sus credenciales.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isBusy = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida")]
        public string Password { get; set; } = "";

        public bool IsValid()
        {
            var context = new ValidationContext(this);
            var results = new List<ValidationResult>();
            return Validator.TryValidateObject(this, context, results, true);
        }
    }
} 